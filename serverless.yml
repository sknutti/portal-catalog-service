service: portal-catalog

plugins:
    - serverless-domain-manager
    - serverless-pseudo-parameters
    - serverless-offline
    - serverless-leo

package:
    excludeDevDependencies: false
    exclude:
        - '**/*'
    individually: true

custom:
    environment: ${file(environments.yml):${self:provider.stage}}
    spreadsheetTable: ${self:service}-spreadsheet-${self:provider.stage}
    s3BucketName: ${self:service}-${self:provider.stage}
    fanaticsBucketName: fanatics-short-term-project-01
    apiV3ChannelOverrideBucketName: apiv3-catalog-override-${self:provider.stage}
    publishSpreadsheetBotName: ${self:service}-${self:provider.stage}-publish-category-spreadsheet-bot
    copyChannelOverrideSpreadsheetBotName: ${self:service}-${self:provider.stage}-copy-channel-override-spreadsheet-bot
    test:
        leoStack: TestBus
    staging:
        leoStack: StagingBus
    prod:
        leoStack: ProdBus
    customDomain:
        domainName: ${self:custom.environment.domain}
        basePath: portal-catalog
        endpointType: ${self:custom.environment.endpointType}
        certificateArn: 'arn:aws:acm:${self:provider.region}:#{AWS::AccountId}:certificate/c0d72c6f-8984-49f9-b036-511596f7ab55'
        createRoute53Record: false

provider:
    name: aws
    runtime: nodejs12.x
    versionFunctions: false
    deploymentBucket: leo-cli-publishbucket-19e80lsbylz0f
    stage: ${opt:stage, 'test'}
    environment:
        AUTH_USER_TABLE: ${self:custom.environment.authUserTable}
        CURRENT_CATALOG_TABLE: ${self:custom.environment.currentCatalogTable}
        ENVIRONMENT: ${self:provider.stage}
        S3_BUCKET: ${self:custom.s3BucketName}
        FANATICS_BUCKET: ${self:custom.fanaticsBucketName}
        LEO_ENVIRONMENT: ${self:provider.stage}
        API_V3_CHANNEL_OVERRIDE_BUCKET_NAME: ${self:custom.apiV3ChannelOverrideBucketName}
        API_V3_CHANNEL_OVERRIDE_UPLOAD_DIR: catalog-override
    region: ${opt:region, 'us-east-1'}
    s3:
        CatalogItemBucket:
            name: ${self:custom.s3BucketName}
            bucketName: ${self:custom.s3BucketName}
            accessControl: BucketOwnerFullControl
            corsConfiguration:
                CorsRules:
                    - AllowedHeaders: ['*']
                      AllowedMethods: ['GET', 'HEAD', 'PUT']
                      AllowedOrigins: ['*']
                      MaxAge: 3000
            lifecycleConfiguration:
                Rules:
                    - Id: ExpireCatalogItemUploads
                      ExpirationInDays: 90
                      Prefix: 'uploads/'
                      Status: 'Enabled'
                    - Id: ExpireCatalogItemDownloads
                      ExpirationInDays: 30
                      Prefix: 'downloads/'
                      Status: 'Enabled'
            publicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    iamRoleStatements:
        - Effect: 'Allow'
          Action:
              - dynamodb:GetItem
          Resource:
              - 'arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.environment.authUserTable}'
              - 'arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.environment.currentCatalogTable}'
        - Effect: 'Allow'
          Action:
              - s3:PutObject
              - s3:ListBucket
              - s3:GetObject
          Resource:
              - 'arn:aws:s3:::${self:custom.s3BucketName}/*'
              - 'arn:aws:s3:::${self:custom.fanaticsBucketName}/*'
        - Effect: 'Allow'
          Action:
              - s3:PutObject
          Resource:
              - 'arn:aws:s3:::${self:custom.apiV3ChannelOverrideBucketName}/*'
        - Effect: 'Allow'
          Action:
              - execute-api:Invoke
          Resource: # TODO: this could be more restrictive!  Only used for item search
              - 'arn:aws:execute-api:${self:provider.region}:#{AWS::AccountId}:*/*/*/*'
        - Effect: 'Allow'
          Action: secretsmanager:GetSecretValue
          Resource: 'arn:aws:secretsmanager:${self:provider.region}:#{AWS::AccountId}:secret:mongo-${self:provider.stage}*'
        - Effect: 'Allow'
          Action:
              - lambda:InvokeFunction
          Resource:
              - 'arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:custom.publishSpreadsheetBotName}'
        - Effect: 'Allow'
          Action:
              - lambda:InvokeFunction
          Resource:
              - 'arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:custom.copyChannelOverrideSpreadsheetBotName}'
        - Effect: 'Allow'
          Action:
              - ses:SendEmail
          Resource:
              - 'arn:aws:ses:${self:provider.region}:#{AWS::AccountId}:identity/notifications@dsco.io'
        - ${file(./leo-iam.yml):kinesis}
        - ${file(./leo-iam.yml):firehose}
        - ${file(./leo-iam.yml):s3}

functions:
    - ${file(./api/get-assortments/serverless.yml)}
    - ${file(./api/generate-category-spreadsheet/serverless.yml)}
    - ${file(./api/get-category-spreadsheet-upload-url/serverless.yml)}
    - ${file(./bot/fanatics-upload-handler/serverless.yml)}
    - ${file(./bot/publish-category-spreadsheet/serverless.yml)}
    - ${file(./api/get-content-exceptions-spreadsheet/serverless.yml)}
    - ${file(./api/get-channel-overrides-upload-url/serverless.yml)}
    - ${file(./bot/copy-channel-override-spreadsheet-to-apiv3/serverless.yml)}
    - ${file(./api/get-all-assortments/serverless.yml)}
