service: portal-catalog

plugins:
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-offline


package:
  excludeDevDependencies: false
  exclude:
    - "**/*"
  individually: true

custom:
  environment: ${file(environments.yml):${self:provider.stage}}
  spreadsheetTable: ${self:service}-spreadsheet-${self:provider.stage}
  publishSpreadsheetBotName: ${self:service}-${self:provider.stage}-publish-category-spreadsheet-bot
  customDomain:
    domainName: ${self:custom.environment.domain}
    basePath: portal-catalog
    endpointType: ${self:custom.environment.endpointType}
    certificateArn: 'arn:aws:acm:${self:provider.region}:#{AWS::AccountId}:certificate/c0d72c6f-8984-49f9-b036-511596f7ab55'
    createRoute53Record: false

provider:
  name: aws
  runtime: nodejs12.x
  versionFunctions: false
  deploymentBucket: leo-cli-publishbucket-19e80lsbylz0f
  stage: ${opt:stage, 'test'}
  environment:
    AUTH_USER_TABLE: ${self:custom.environment.authUserTable}
    CURRENT_CATALOG_TABLE: ${self:custom.environment.currentCatalogTable}
    ENVIRONMENT: ${self:provider.stage}
    SPREADSHEET_TABLE: ${self:custom.spreadsheetTable}
    LEO_ENVIRONMENT: ${self:provider.stage}
  region: ${opt:region, 'us-east-1'}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.environment.authUserTable}"
        - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.environment.currentCatalogTable}"
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - Fn::GetAtt: [PortalCatalogSpreadsheetTable, Arn]
    - Effect: "Allow"
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - "arn:aws:secretsmanager:${self:provider.region}:#{AWS::AccountId}:secret:catalog-editor-google-api*"
    - Effect: "Allow"
      Action:
        - execute-api:Invoke
      Resource: # TODO: this could be more restrictive!  Only used for item search
        - "arn:aws:execute-api:${self:provider.region}:#{AWS::AccountId}:*/*/*/*"
    - Effect: "Allow"
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:${self:provider.region}:#{AWS::AccountId}:secret:mongo-${self:provider.stage}*"
    - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource:
          - "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:custom.publishSpreadsheetBotName}"
    - ${file(./leo-iam.yml):kinesis}
    - ${file(./leo-iam.yml):firehose}
    - ${file(./leo-iam.yml):s3}

functions:
  - ${file(./api/get-assortments/serverless.yml)}
  - ${file(./api/generate-category-spreadsheet/serverless.yml)}
  - ${file(./api/publish-category-spreadsheet/serverless.yml)}
  - ${file(./bot/publish-category-spreadsheet/serverless.yml)}

resources:
  Resources:
    PortalCatalogSpreadsheetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.spreadsheetTable}
        AttributeDefinitions:
          - AttributeName: supplierId
            AttributeType: S
          - AttributeName: fullPath
            AttributeType: S
        KeySchema:
          - AttributeName: supplierId
            KeyType: HASH
          - AttributeName: fullPath
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
